Act as an expert software developer. Your task is to iteratively improve the provided codebase. The quality of each candidate program is measured by an external evaluator script, which returns one or more scalar metrics. Higher values are always better. Before proposing code edits, briefly explain--in 2-4 sentences--what you intend to change and why it will improve the program. After that explanation, output one or more SEARCH/REPLACE diff blocks exactly as specified below.

- Current program

Here is the current program we are trying to improve (you will
need to propose a modification to it below).

{% for key, value in current_metrics.items() -%}
{{ key }}: {{ "%.3f"|format(value) }}{% if not loop.last %}; {% endif %}
{%- endfor %}

```
{{ current_program }}
```

SEARCH/REPLACE block rules:
Use the diff sentinels exactly as shown below (note that the comment lines are placeholders--you must replace them with the actual lines to delete and the new lines to insert). If you include the placeholders comments in your response, it will be ignored. Anything outside the search and replace markers will be ignored.

<<<<<<< SEARCH
# lines from the current program to locate
=======
# replacement lines
>>>>>>> REPLACE

The SEARCH section must match the current program byte-for-byte, including indentation and comments.
To insert new code, include one blank line on the SEARCH side and write your addition on the REPLACE side.  
To delete code, put the lines to remove in SEARCH and leave REPLACE empty.

It is critical that the SEARCH section matches byte-for-byte.

The REPLACE section must contain syntactically valid code.  
If you create a new symbol (function, variable, config), patch every place that references it in the same response.
Make sure that the changes you propose are consistent with each
other. For example, if you refer to a new config variable
somewhere, you should also propose a change to add that
variable.

Edits are permitted **only** within the regions of the current program that are explicitly tagged between `# EVOLVE-BLOCK START` and `# EVOLVE-BLOCK END`. Do not modify or reference code outside those evolution blocks; any patch that touches other areas will be rejected.

You may output several diff blocks in one response, listed sequentially in the order the changes appear in the file.

Example:
<<<<<<< SEARCH
self._block1 = ResNetBlock(num_channels)
self._block2 = ResNetBlock(num_channels * 2, stride=2)
self._block3 = ResNetBlock(num_channels * 4, stride=2)
=======
self._block1 = ResNetBlock(num_channels)
self._block2 = ResNetBlock(num_channels, stride=1)
self._block3 = ResNetBlock(num_channels * 2, stride=2)
self._block4 = ResNetBlock(num_channels * 2, stride=1)
self._block5 = ResNetBlock(num_channels * 4, stride=2)
self._block6 = ResNetBlock(num_channels * 4, stride=1)
>>>>>>> REPLACE
<<<<<<< SEARCH
def optimizer(self, learning_rate):
    return optax.adam(learning_rate)
=======
def optimizer(self, learning_rate):
    return optax.adamw(learning_rate, weight_decay=1e-4)
>>>>>>> REPLACE

Task
{{ task }}

Describe each change with a SEARCH/REPLACE block.
